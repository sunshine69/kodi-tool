// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/ajax.js
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _staticAjaxJs = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6b\x7f\xdb\xb6\xd5\x7f\xaf\x4f\x71\xaa\xa7\x4f\x49\x59\x32\x99\x74\x59\x2f\xb2\x95\xc6\x71\x6e\xee\xec\x38\x8b\x9d\xd6\xdb\xb2\xf6\x07\x93\x87\x22\x62\x12\x60\x01\xd0\x92\x96\xf9\xbb\xef\x07\xf0\x06\x51\xa4\x6c\x77\x4d\x3b\xbe\x89\x4c\x9c\xfb\xe5\x0f\x1c\x30\xfe\xce\xce\x00\x76\xe0\xe0\xfb\x83\x8b\x29\x9c\xf1\x14\x41\xd2\x34\x4b\x70\x02\x31\x61\xe1\x0a\x64\x20\x68\xa6\x24\x44\x5c\x00\x91\x2b\x16\xc4\x82\x33\x9e\x4b\x08\x78\x9a\xe6\x8c\x06\x44\x51\xce\xa4\x37\x00\x23\xe7\x07\x14\x92\x72\x36\x85\x07\xde\xc3\xf2\xd5\x31\x0d\x90\x49\x9c\xc2\x9b\xfc\x32\xa1\x01\x3c\xe3\x29\xa1\xac\x5c\x3c\xc8\x55\xcc\xc5\x14\xde\xf2\x4b\x14\x0a\x5e\x11\x11\xa2\xd0\x0b\xd5\x23\x62\xf3\xea\x49\x2e\x51\x48\x4f\x46\x1e\x43\x55\xf2\xbe\xc8\x59\x60\x94\x1b\xe3\x56\x3c\x07\xc5\x21\x20\x49\x32\x2d\x09\xf4\xa3\x1d\xf3\xe6\xa8\x2e\x4e\x8e\x5d\xc8\x45\x32\x31\x14\x97\x24\xb8\x82\x91\xad\xe7\x2d\x2a\x41\xf1\x1a\x25\x38\xb9\x48\x1c\x20\x2c\x04\xa2\x14\xa6\xda\x79\xc5\x21\x23\x42\x22\x10\x09\x17\x27\xc7\x9e\xcd\x78\x1e\x23\x2c\xd3\x04\x9e\x9d\x9e\x00\xbf\xfc\x80\x81\x02\x2a\x21\x23\x52\x62\xa8\x19\x55\x8c\xe0\x54\x3a\x1d\x9b\x33\x2a\xed\x87\x45\x4c\x83\x18\x64\xcc\xf3\x24\x04\x12\x04\x98\x29\x20\x20\x29\x9b\x27\x08\x44\xcc\xf3\x14\x99\x9a\xd8\xac\x6a\x43\xa9\xd7\xe1\xf3\x39\x2e\xd5\xbd\x9d\x36\x96\x4b\xa3\x41\x90\x05\x08\x54\xb9\x60\xda\x15\x5c\xaa\x35\x13\xda\xae\xdd\xe2\x8f\xcd\xdb\x76\xcd\x48\xd2\x0a\x40\x2a\x41\xd9\x7c\xc3\x19\x89\xea\x07\x92\xe4\x58\x7a\x83\x09\x6a\xbe\x3e\x67\xb4\xdd\x46\x5a\x24\x78\xda\x93\x4f\x89\xaa\x1d\x50\xe7\x5a\xab\x70\x20\x13\x3c\x43\xa1\x56\xc0\x23\x70\x4a\x55\x4e\xaf\x49\x4f\x57\x47\x61\x69\x16\x0d\x7f\x07\x8b\x2a\xdf\x1d\x1a\x76\x1a\x75\xc4\x18\x8a\x57\xe7\x75\xb9\x7f\xa2\x58\xd1\x4a\xcd\x3d\xe2\x55\x9b\xf6\x49\x63\xd6\x63\x59\x47\xdc\x34\xeb\x21\x67\xa1\x86\xa7\x10\x9e\x2f\x89\x06\x3e\x1b\x3c\xf6\xb3\xc7\x8d\x78\xdd\xe8\x84\xc9\x05\x0a\xad\xf9\x98\x46\x58\xd4\xed\x3b\x46\xaf\x51\x48\x9c\x18\xeb\x9e\x5f\xa3\x58\xa9\x98\xb2\xf9\xb4\x61\xdd\x97\x19\x61\x40\xc3\xd9\xb0\x10\x30\x7c\xfc\x23\xa1\x8a\xb2\xb9\x41\xae\x67\x88\x19\x9c\xc7\x3c\x9f\xc7\xca\xf3\xbc\x7d\x5f\x53\xd7\x8a\xf7\xfd\xc6\x88\xfd\x02\x8d\x41\x8a\x60\x36\x24\x1f\xc8\xd2\xfb\x20\x87\xa0\x56\x19\xce\x86\x3a\x54\xfe\x07\x72\x4d\x0a\x9a\x21\x3c\xde\xf7\x8b\x9f\x6d\x76\xcb\xa7\x9e\xcc\x38\x21\x62\xa6\x4a\x8b\xb2\x38\xfb\x8e\x98\xc6\x9e\x69\xbf\xae\x34\x20\x3b\x93\x2a\x14\xa3\xc6\xce\x46\xfa\x00\x76\xfc\x81\xef\xbf\xcb\x42\xa2\x10\x2e\x57\x20\x15\x5e\xe3\x95\x8e\x1b\x09\x43\x90\x66\x9b\x49\x49\x92\xd4\x98\x21\xe1\x08\x72\x89\xa1\x37\x00\xdf\xf7\x35\x33\x1c\x45\xc6\x3c\x8d\xa6\x8c\x2b\x58\xa1\x82\x10\x23\xca\x30\x9c\x94\x3f\x80\x2a\x4f\x53\x9e\xc7\x1a\x71\x05\x57\x18\x28\x09\x64\x4e\x28\x93\xaa\x60\x26\x41\x40\x43\x64\x8a\x24\xc9\x4a\x93\x5e\xa2\x8e\x3a\x65\x41\x92\x87\x18\x42\xca\x05\x82\x8a\x09\x03\xce\x02\xd4\xc2\x7c\x7f\x40\x23\xd7\xc4\x94\x97\x06\xcc\x66\xe0\xe4\xac\xd4\xed\xc0\xe8\xe3\x60\xb0\x06\xdf\x4a\xd0\xd4\x95\x23\xf8\x58\x82\x25\x80\xf4\x04\x66\x09\x09\xd0\xf5\x7f\x7a\x2f\xc7\xff\x7e\x2f\xc7\x9f\xfb\xf3\x09\x38\xce\x08\xf6\x6e\x5a\xec\xe9\xea\x39\x0b\x78\x88\xae\x54\x62\x04\x1f\x07\x55\x31\x5f\x13\x01\x72\x86\x32\x20\x19\xba\x85\x0e\x25\x46\xa3\xbd\x9a\x40\xce\x2c\x3d\xef\xc7\xfe\x7c\x32\x1c\x0f\xfb\xd6\x9f\xe8\xe5\x27\xbd\xcb\xef\x7d\xbd\xee\xf7\xaf\xef\xe8\xf5\x1d\x7b\xbd\x70\xd6\x95\xe5\xab\xb6\x5b\x01\xcf\x56\x7a\x03\x3a\xe7\x87\x09\xcd\x2e\x39\x11\xa1\xab\x6b\xf4\x67\xc5\x7f\xd6\x6b\x8d\xab\xda\x51\xbd\x72\x20\x90\xc0\x0c\x42\x1e\x98\x5d\xc1\x0b\x04\x12\x85\xcf\x8b\xbe\x75\x4d\x81\x13\x81\xa4\xb1\xa1\x62\xf2\xa4\x5a\x25\xe8\x65\x5c\x52\xa3\x7a\x06\x4e\x44\x97\x18\x3a\x3d\x84\x8a\x67\x30\x83\x07\x3d\xab\x09\x46\x6a\xcb\xf2\x82\x86\x2a\xd6\x2a\xbe\xc4\xb4\x4f\x41\x8c\x74\x1e\xab\x5b\x88\x32\x12\x86\xba\x18\xfb\x55\x5d\x72\x7d\xf4\xd1\x62\x18\x67\xd8\x27\x87\xe7\x2a\xd1\xcd\x70\x0b\xd9\x25\x5f\x9e\xc5\x24\xe4\x8b\x5b\x09\x49\x70\x35\x17\x3c\x67\xa1\xa6\x54\x82\x30\x99\x11\xa1\x31\x7d\x6f\xd0\xe6\x30\xfb\x13\xcc\xc0\x4e\x6c\x25\xb6\xce\xe3\x25\x0f\x57\x1e\xc9\x32\x64\xe1\x61\x4c\x93\xa2\x0c\x34\xfb\x68\x53\xa0\xc4\x04\x03\xe5\x5a\x2b\x62\xd5\xee\x89\x3c\x08\x50\xca\x28\x4f\xec\x62\xc1\x25\x06\x87\x3c\x4d\x09\x0b\x5d\x47\x9b\xe1\x58\xa5\xaa\xd9\x52\xa9\x43\x6d\x31\x7f\x07\x4e\xf3\x97\x03\x53\xdd\xe4\xd6\x8b\x86\x3b\xe0\x4c\x72\x5d\x18\x7c\xee\x3a\x87\x3c\x5b\xe9\xac\x99\x9d\x29\x28\x14\xc2\x82\x48\x70\x60\xac\x75\xd4\x5a\x6f\x20\x20\x2a\x88\xc1\x45\xb1\xd6\xd6\x6b\xd2\x4e\x79\x26\x27\x90\x33\x72\x99\xa0\x39\xbd\xae\x19\x7e\x33\xe8\x0c\xa5\xc0\x94\x5f\xe3\x46\x28\x2d\x0e\xdf\x2f\x8e\xf2\x0d\xba\x2a\x0e\x73\x64\x28\x34\x1e\x0b\xc2\x42\x9e\x9a\x83\xde\x82\x8b\xd0\x70\x9c\x15\xe7\x2e\x0d\xa2\x5c\x63\x9f\x97\xd1\xe0\x0a\x66\xb5\x04\x37\xa5\x6c\x02\x29\x59\xb6\x11\x8a\x4d\x20\x88\x89\x90\xba\x56\x9a\x02\x01\xa0\x11\xb8\x25\x88\xa6\x64\x09\xb3\x75\x10\xb5\xa5\xe8\x47\xf7\x6c\x4a\x59\x13\xf3\x1b\xc0\x44\x62\x37\x15\x8c\xe1\x84\xa8\xd8\x8b\x12\xce\x85\x6b\x7e\x16\x2e\xb9\x23\xd8\x01\x57\xab\xdb\x2d\xe9\x1e\xda\x78\x79\xd3\x58\xa7\xb7\x5d\x57\x9b\x4f\x4d\xfb\x01\x85\x7d\x60\x7b\x40\xc7\xe3\xb6\x65\x85\x73\xe3\x19\xa8\x98\x4a\x4f\xff\x75\xa0\xdc\x2d\xea\x0d\x59\x82\x6c\xae\xe2\x1e\xdd\xe5\x26\x61\x04\x97\x59\xdb\xab\xb2\x76\x28\x30\xa4\x4a\x67\xeb\xc9\x61\x2c\xa8\x54\x3c\x8b\xa7\x10\x2b\x95\x4d\x7d\x5f\x2a\x12\x5c\xf1\x6b\x14\x51\xc2\x17\x5e\xc0\x53\x9f\xf8\xdf\x7e\xf5\xe5\x37\xdf\x3e\xf0\x1f\x7d\xf5\xe8\xeb\x47\x8f\xba\x33\x29\xe3\x3c\x8a\x12\xb4\x93\xd9\x4e\x22\x11\x82\xac\xa0\xf4\x51\x66\x09\x55\xae\xd3\xee\x1f\x95\x66\x13\x08\x72\x21\x8a\x03\xbb\x81\x50\xc3\x57\x7a\xdb\xce\x3d\xcf\x46\x7a\x10\x48\x10\xdc\xdd\x5d\xf3\x57\x2b\xb0\x85\x28\x98\x6d\x4d\xa6\xd6\xd3\x4a\xa3\x7e\x54\x5a\xab\xff\x47\x29\xe8\x9f\xeb\x14\xeb\x6b\x35\xb1\xe2\x59\x27\xa1\x7e\xaf\x03\x90\x66\xdb\x72\x56\xf8\xfb\x81\x53\xd6\xc4\xe7\x66\xaf\xb5\xf1\x65\x8b\x39\x32\xb7\x2c\x81\x36\x76\x65\x18\x50\x92\x98\x6e\xf9\xec\xc9\xff\xfd\xbf\x37\xd9\x7f\xfc\xf1\xe6\xf3\x9f\xbe\xd8\xfd\x79\x36\x76\xd6\x03\x9e\xf0\x05\x8a\x80\x48\x83\xec\xe4\x32\x08\x31\x9a\xc7\xf4\xc3\x55\x92\x32\x9e\xfd\x22\xa4\xca\xaf\x17\xcb\xd5\xbf\x5a\x5c\x79\x96\x35\x5c\x07\x4f\x0f\x9f\x3d\x7f\xf1\xf2\xd5\xd1\xf7\x7f\x39\x3e\x79\x7d\xfa\xe6\xaf\x6f\xcf\xce\xdf\xfd\xf0\xe3\xc5\xdf\xfe\xde\xe2\x62\x79\x7a\x89\x45\x13\x3f\x78\xf8\xe5\x9f\x1e\xfd\xf9\xab\xaf\xbf\xf9\xd6\x6e\x67\x53\x25\x89\x46\xdc\xda\x85\xb1\x65\xe1\xd8\xd2\x3b\xae\xa4\xb5\xd8\x2b\xbc\x29\x91\xa2\x5a\xaa\x5f\x8f\x1b\xd9\x06\x7d\xdc\x87\xa3\x6e\xaa\x5a\xed\x76\xb2\xda\xa2\xed\x64\xa5\xb1\xdb\x89\x48\x92\x14\x04\x45\x5a\x27\x50\xa6\xb7\x83\x7a\x56\xff\xac\x3a\xcf\xdd\x38\x34\xd5\x24\x6b\xa8\x5d\x1c\x36\xad\x8a\x31\x77\x33\xd5\xb3\x73\xdf\x2b\x8a\x86\xf1\xbe\x57\x14\x0d\xe7\xbd\xaf\x28\x1a\xd6\xce\x2b\x8a\x7a\xd9\xaf\x7f\x17\x77\x33\x30\x6d\xd0\x69\xf3\xc6\xa2\x7c\xd6\x01\xa4\x0c\xa5\x19\x61\xf4\x2c\xf4\x22\x4f\x92\x16\xef\x04\x22\xa2\xb7\x11\x1b\x88\x27\x06\x68\x91\x85\xa5\xe6\xc1\x7d\xc2\xbd\xfd\x72\xc4\x72\xfe\xde\x97\x23\x0d\xef\x1d\x2e\x47\xba\xc3\xa8\x4f\xdb\x9f\x2a\x8e\x4a\xe4\x5b\xc2\xa8\x35\x37\x71\xcc\xb8\xec\xb1\x25\x23\x82\xa4\xb2\x91\x6b\x99\xb4\x61\xc6\x1b\x2e\xdb\x97\x57\x8d\x80\xd2\x1c\xb8\x99\x6c\xaa\x7d\x4a\x24\x0d\x0e\x72\x15\xf7\xeb\xcf\x25\x8a\x89\x49\xe6\x6f\x64\x8b\x2d\xb2\x6d\x57\x6f\x59\xdd\xf9\x82\x63\xbd\xa9\xee\x72\xf5\xd2\x51\x20\xf6\x94\xdf\x04\x06\x36\x6f\x89\x3a\x8b\xa4\xe3\x4a\xb1\x89\xad\x71\xa2\x1a\x8b\xed\x47\x4f\xd2\x95\xe4\x2f\xbe\xa8\x7e\x7a\xb5\x03\x96\x3a\xfb\xd9\xa4\x2b\x26\x8c\xbd\x75\x0d\x37\xa3\xbd\xaa\x06\x75\x92\x6a\x83\xba\x8a\xd4\xf6\xfe\xf7\x4f\x4d\xeb\xee\xe9\x96\xec\x3c\x5d\x1d\x85\x9b\xb5\x5b\x5c\x94\x75\x26\x47\x87\xb9\x1e\x11\xe6\xa8\xca\x91\xd9\xc8\xd9\x8c\xb0\x5d\xdc\x1d\xf7\x85\x3d\x82\x5c\x63\x00\x8c\xac\x1c\xf4\x84\x57\x53\x7f\xc2\x10\xdf\x72\x49\xdb\x1d\x5b\x73\x53\xfb\x07\x57\x7d\x31\x2b\x6f\xaf\x78\x7b\x9e\xfe\xdf\xaf\xf6\xdb\x6f\xa7\xb7\x64\xe3\xf7\xad\x72\xfb\xeb\xc1\xaf\xad\xf0\xda\xec\x72\xc8\xde\x81\x9d\xf2\x01\x38\x82\xd7\x70\x0e\xcf\xe1\x2d\xbc\x86\x03\x38\x06\x80\x17\xf0\x0e\x5e\xc3\x21\x9c\xc3\x11\x9c\xc2\x6b\x38\x83\x86\xdc\x0a\x47\xb5\xbd\xf4\x6f\xdc\xd6\x4e\x83\x4b\x75\xc4\xa4\x42\x12\x9e\x46\x17\x69\x52\xec\x3a\x33\xc7\x29\x36\x9e\x99\xe3\xb4\xe7\x0d\x81\xbf\xe4\x28\xf5\x90\x65\x02\xa1\x07\xc9\xf2\x95\x7d\x28\xd5\xf3\x9a\x96\xa4\xab\x55\x0b\x1a\x55\x7c\x1e\xcf\x90\xb9\xc3\x37\xa7\x67\xe7\xc3\x49\x61\x55\x7b\xb7\xb3\xc4\x98\x89\x7d\x3b\xe7\xda\x49\xb8\x20\x94\xa8\xde\x16\x3f\x5f\x21\x09\x51\xb8\xc3\x43\xce\x14\x32\xb5\xab\xa7\xd7\xe1\x04\x86\x24\xcb\x92\xf2\x3b\xa3\xbf\xdc\x5d\x2c\x16\xbb\x11\x17\xe9\x6e\x2e\x12\x34\x17\xa7\xa1\x7d\x2b\x59\x5d\x07\x07\x24\xd7\xa7\x5b\x14\xc2\x7c\x5e\xc4\x28\x2f\x0f\xbb\x12\x15\xe4\x4c\x92\x08\x21\x36\x0a\x2d\xd6\xdb\x6d\x2a\xce\xfd\xc3\x2a\x27\xde\xc6\x1c\xb0\x4d\x48\xc0\x19\x43\x93\x62\xed\x56\x90\x70\x89\xc3\xce\x88\xb0\xd0\x2d\xe4\x77\xac\x72\x26\x90\x84\x2b\xa9\x88\xc2\x20\x26\x6c\xde\x3b\xd9\xeb\x86\xa9\xb8\x0c\xcf\x99\xe6\x81\xd9\x0c\x1e\x41\x7b\x1a\xd7\x61\x5b\x3b\xc3\x96\xfc\xed\x92\xdb\x60\xd4\x4f\x55\xa9\xb6\x3a\x99\x71\x26\xd1\x1c\x03\x5b\xb3\xfb\x4d\xd5\x52\x34\x9a\xb6\x0e\xce\x85\x21\xfa\x50\x6e\xbf\xea\xb8\x09\xaa\xea\x7b\x99\x26\xcf\x78\x00\xb3\x0d\xc5\x17\x27\xc7\x7b\x1b\x1c\xbe\x0f\x67\xc5\x84\x09\x7a\x2e\x9c\xea\xc2\x5f\xa0\x23\x10\x72\x7d\xe8\x86\x97\x9c\xcf\x13\x74\x24\x48\x95\x47\x51\x17\x7b\x2e\x51\x43\x1f\x15\xc5\xb0\x25\xf4\xb4\x45\xf4\x90\x61\xfc\xf7\x3a\xb7\x82\xc2\x46\xaf\x42\x9d\x12\x71\x74\x1a\x58\x9e\x24\xba\xe7\x5e\xea\xc0\x96\xff\x7a\xc5\x14\xb7\x09\x68\xb5\xab\x0d\xd5\xdd\xe2\xbd\x9e\xa1\x52\x4c\x5f\x4e\x74\xac\xa7\x9a\xa8\x3f\x65\xa6\x94\xc0\xd4\x1f\x3c\x6a\xa0\xb2\xde\x9d\x38\x5b\x23\x29\x6a\xd4\xc6\x54\x6b\x47\xf2\x7d\xdf\xee\xdc\x77\xba\x47\x29\x53\x28\x18\x49\x92\x95\x6e\x57\x51\xee\x52\xc5\x06\x65\xff\x0f\x84\x64\xe5\x75\x0b\xaa\x86\x98\x6d\x90\xba\x59\xd7\x3d\xbb\xce\xdd\x51\x14\xec\x26\x35\xe8\xf7\xf2\x79\x1f\xf8\xc1\xaf\x6a\x68\xbb\xaa\xb6\x35\x76\xe7\x11\xa3\xab\xc3\x6d\x81\x9d\x9d\xde\x49\x0d\x77\x6a\xf9\x4e\xd6\xcd\xde\xef\xb3\xb5\x0d\x02\xd5\x53\x82\x41\xaf\x61\xb7\xa3\x42\x2f\xeb\x7f\x09\x0f\x96\x98\xfb\xc2\x44\xf5\xfc\x86\x70\x61\x3f\xf7\x82\x8e\x3b\xa4\xbc\xc1\x90\xed\x49\xee\x06\x13\xb8\x1b\xa0\xc0\x7d\x40\x05\xda\xdb\xa7\x8e\xd5\xfa\x49\xce\x3a\x3b\x0f\xee\x85\x40\xc5\x67\x48\x78\xa5\x54\x56\xee\xe7\x3d\xb8\x63\xe1\x82\x0d\x3d\x7d\xc8\xe2\xfb\x70\x42\x03\xc1\x25\x8f\xd4\x77\x9b\x1b\x6f\xf9\x01\x3a\x50\xf4\x1a\x2f\x4e\x8b\x5b\xbb\xcf\x36\xbe\x44\xb7\x03\xbb\xfe\xb9\x6c\x3d\x3c\xe6\x40\xcc\x70\xb1\x2e\xd4\x05\xa7\x36\xc3\xbb\x38\x39\x7e\x75\x7e\xfe\xc6\xe9\xda\x43\xca\x0f\x5a\x2e\xe0\x32\xe8\x3c\x06\x94\x4e\x99\x23\x57\x07\x77\x7d\x94\x36\x62\xa6\x5a\x0c\x66\x6b\x13\x4c\x8b\x4e\xd7\x46\x6d\xda\xa0\x1d\xbb\x33\x45\x58\x48\x44\xd8\x1b\x3a\xed\x4b\x93\xb3\xdf\x2a\x76\xeb\x52\xdb\xf8\xff\x87\xc5\xa9\x8a\x46\x53\xf0\x45\xc0\x2c\x32\xbd\x77\xb5\xdf\x69\x56\x73\xed\xcc\xb8\x02\x92\x14\x2d\x56\xc6\xe8\x3f\x01\x00\x00\xff\xff\x47\x3f\xe6\xb6\x1a\x28\x00\x00"

func staticAjaxJsBytes() ([]byte, error) {
	return bindataRead(
		_staticAjaxJs,
		"static/ajax.js",
	)
}

func staticAjaxJs() (*asset, error) {
	bytes, err := staticAjaxJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/ajax.js", size: 10266, mode: os.FileMode(436), modTime: time.Unix(1576126384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4b\x6f\x1b\x37\x10\xbe\xfb\x57\x0c\x78\xa8\x64\x24\xd5\xca\x31\x52\xc4\x16\x77\x81\xf4\x71\x48\x91\x53\xd3\x02\xbd\x19\xd4\x72\x2c\xd3\xa6\xc8\x05\x39\xab\x58\x2d\xf2\xdf\x0b\x2e\xf7\x65\x59\xbb\x92\xea\x06\x68\x51\x9f\x96\xe4\xbc\xf8\xcd\xf0\x9b\xb1\xf8\x1d\xad\x75\x76\xc6\xef\x50\xc8\xec\x0c\x80\x93\x22\x8d\xd9\x27\x34\x12\x36\x4a\xa2\x05\xad\xcc\x03\x90\x85\x07\x2b\x15\x4f\xe2\x71\x10\xf4\xb9\x53\x05\x01\x6d\x0b\x4c\x19\xe1\x23\x25\xf7\x62\x23\xe2\x2e\x03\xef\xf2\x74\x92\x78\x12\xa4\xf2\x44\xdc\x8b\xc7\xd9\xbd\x9f\x64\x3c\x89\xe7\x7d\x03\x5a\x98\x55\x29\x56\x98\xb2\x9e\x7e\x10\x00\xb8\x2d\x4d\x4e\xca\x9a\xca\xf7\x8d\x90\xf2\xa6\x74\x7a\x7a\x0e\x7f\x56\xa7\x00\xef\x7f\x7e\xff\xfb\xac\xb0\x9e\x7e\xc5\x47\x9a\xb2\x44\x48\xc9\x5e\x03\x2b\x9d\x4e\x19\xbc\x02\x34\xb9\x95\xf8\xdb\x2f\x1f\x7e\xb0\xeb\xc2\x1a\x34\x34\x95\x36\x2f\xd7\x68\x68\xb6\x42\xfa\x49\x63\xf8\xfc\x7e\xfb\x41\x4e\x27\x1b\x25\x6f\xc2\x4d\x27\xe7\xb3\x8d\xd0\x25\x9e\xc3\x2b\x60\xdf\x34\x7e\x5d\x65\x6f\x50\xb9\x15\x6b\xb4\x5f\x77\xa1\x4f\x5d\x17\x6f\xff\x2f\xb7\xc6\x5b\x8d\x33\x6d\x57\x53\x77\xbe\xd8\x91\xf8\x52\xef\x7c\xd9\x83\x43\xa1\xc5\xf6\x00\x10\x41\xe4\x7f\x80\x84\x32\x1e\x1d\xfd\x57\x8a\xa2\x52\x2e\xac\x57\xe1\x02\xe9\x05\xfb\xfa\x45\xa2\x95\xa7\x03\x55\x12\x44\x02\x3c\x2f\xba\x54\x30\x72\x13\x28\xe0\x64\x84\x5b\xcd\x16\xe2\x11\x54\xf6\xa3\x31\x86\x82\x17\x1b\x3c\x84\x42\x90\xf9\xd7\xa1\xd0\x19\x34\x62\x8d\x7f\xcf\x60\xd0\xec\x0c\x0e\xe2\x7a\x3a\xaa\xda\x0a\x19\x51\x6d\xfd\x0c\xc3\x1b\x84\xff\x39\x78\xc7\xd0\xe8\x05\x33\x78\x59\x82\x74\xd8\x6f\x2f\x0d\xdd\x53\xa3\x3a\x84\x14\xdc\x73\x6c\x42\x1b\x6b\x5b\x1a\x4f\x62\x13\x3d\xe3\x4b\x2b\xb7\xd9\x19\x2f\xc0\xd3\x56\xd7\xdd\xf1\x5b\xa1\xd5\xca\x5c\x43\x8e\x86\xd0\x2d\x58\xc6\x3d\x39\x6b\x56\x19\xc7\xf5\x6e\xbb\xf5\x4d\xbf\x05\x65\x3c\x09\x93\x23\x4f\x70\x1d\xba\x67\xad\x92\x14\xc1\x0d\x89\xa5\x46\xa8\xec\xa6\x2c\xda\x65\xb0\xb4\x4e\xa2\x4b\xd9\x9c\x41\x8e\x5a\x17\x42\x4a\x65\x56\x29\xbb\x8c\x6b\x5f\x88\xbc\x5e\xc7\x76\x1f\x63\x0d\xd7\xe1\xe4\xb2\xfa\x86\x9c\x64\x16\x02\xe1\x09\xc9\xfe\x1e\x57\xa6\x28\x09\x62\x16\x1a\x76\x64\xa0\x64\x7f\xe5\xd5\x1f\x98\xb2\xab\xab\x39\xeb\x0d\x07\xac\xc1\xe2\xb3\x92\x74\x77\x0d\x17\x6f\xe7\xc5\xe3\x82\x25\xd9\xa8\x8b\x5c\xa3\x70\x8d\x99\x65\x49\x64\x0d\x83\x2a\x1f\xed\x99\x35\xb9\x56\xf9\x43\xca\x36\xc2\x8d\xa7\xb7\x63\xf3\x45\x93\xd5\x74\x32\x09\xdf\xb7\x36\x2f\xfd\xf4\x7c\x01\x0e\xa9\x74\x66\xc1\xe0\x40\x5c\xbe\x5c\xae\x15\x0d\x04\x26\x8a\x22\xa4\x93\x42\x2e\x3d\xf5\x22\x8c\xd6\x77\x86\x99\x1d\x67\x3c\x69\xb2\xb0\x93\x8e\x7a\xfc\x7a\x12\x53\x5b\xa4\xdc\xa3\xc6\xbc\x89\xae\x7d\x3f\x31\x33\xdd\x32\x7b\xd2\x40\xb8\x2d\xaa\x17\x52\x87\xcd\xb2\x1f\xf1\x56\x94\x9a\x78\x12\x0f\x46\xa5\x2f\xae\xde\xcc\x2e\xbe\x7b\x37\x9b\xcf\x2e\x2e\xe7\xd7\x57\xf3\xab\x39\xcb\x9e\xef\x1d\x65\x4a\xdb\x5c\xe8\x3b\xeb\xa9\x36\xf3\x74\xfd\xdc\x04\x4f\xe2\x6d\x5b\x24\xc6\x32\x15\x7a\xdc\x92\xcc\x40\xaa\xaa\x39\x69\x7f\x82\xba\x29\xeb\x70\x39\xc4\x39\x64\xc4\x8d\xc3\xaa\x24\x46\xea\xa1\x3f\xca\x0c\x94\x04\x4f\xea\xc7\xca\x93\xea\xe5\x87\xa9\xdd\x9d\x46\x33\x62\x83\xf0\xc9\x9a\x15\x7c\x54\x9e\x8e\xe7\x94\x97\x11\x49\xf0\x55\x01\xb5\x83\x21\xe4\x36\x58\x31\x95\x89\x27\x78\xb6\x4c\x1e\x0b\xb8\xb7\x3c\x8a\x5b\x2e\xe7\x35\xb7\x34\xbe\xbe\x1a\xa5\xf4\xfa\xec\x31\x9c\xb2\x2f\x9e\xd0\x1f\x07\xc2\xf9\x58\x1d\xed\x2d\x97\xae\x05\x9f\x30\x03\x8c\xc6\xe0\x30\x64\x7b\x24\x12\x68\x24\x0e\x04\x34\x89\x72\x93\x71\x77\x03\x8e\x42\x85\x0e\x78\xe8\xcd\x72\x9d\xe5\x23\x88\x33\x54\xc8\x20\x71\x86\x25\x3e\x92\x70\x28\xfa\xb5\x17\xab\xaa\xad\xbd\xb8\x0c\xe5\x9a\xb2\x77\x73\x06\xce\x7e\xf6\x29\x7b\xf3\x96\x41\x78\xa6\xb5\xfe\x51\x74\x74\x4a\xf5\x1d\x3d\xab\xbc\xb4\x9b\x45\x16\x1c\x24\xc8\x31\xda\xea\xfd\x9b\x71\x3c\x6b\x25\xcd\x46\xf5\xdb\xc3\x5f\x01\x00\x00\xff\xff\x80\x3e\xbd\x9b\x82\x10\x00\x00"

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 4226, mode: os.FileMode(436), modTime: time.Unix(1576127498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/ajax.js":    staticAjaxJs,
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"ajax.js":    &bintree{staticAjaxJs, map[string]*bintree{}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
